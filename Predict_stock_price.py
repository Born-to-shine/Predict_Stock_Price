# -*- coding: utf-8 -*-
"""recurrent_neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FTmJmkJXSGTO0For0PN0g3azKa0tLJLK

# Recurrent Neural Networks
### The dataset consists of stock price of Google from 2012 - 2016. The task is to train the neural network to predict the trend of stock price of Google in Jan 2017.
### Dataset - Google_Stock_Price_Train, Google_Stock_Price_Test
"""

# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Import training set
dataset_train = pd.read_csv('Google_Stock_Price_Train.csv')
training_set = dataset_train.iloc[:, 1:2].values

# Data Preprocessing - Feature Scaling
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
training_set_scaled = sc.fit_transform(training_set)

# Create data structure with 60 timesteps and 1 output
x_train = []
y_train = []
for i in range(60, 1258):
  x_train.append(training_set_scaled[i-60: i, 0])
  y_train.append(training_set_scaled[i, 0])
x_train, y_train = np.array(x_train), np.array(y_train)

print(x_train)

print(y_train)

# Reshape and add new dimension
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Building RNN - Import libraries
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialize the RNN
regressor = Sequential()

# Add 4 LSTM layers with some dropout regularization
# 1st layer
regressor.add(LSTM(units = 50, return_sequences= True, input_shape = (x_train.shape[1], 1)))
regressor.add(Dropout(0.2))
# 2nd layer
regressor.add(LSTM(units = 50, return_sequences= True))
regressor.add(Dropout(0.2))
# 3rd layer
regressor.add(LSTM(units = 50, return_sequences= True))
regressor.add(Dropout(0.2))
# 4th layer
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Add Output layer
regressor.add(Dense(units=1))

# Compile RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fit the RNN to training set
regressor.fit(x_train, y_train, epochs = 100, batch_size = 32)

# Making the predictions and visualising results
# Getting real stock price
dataset_test = pd.read_csv('Google_Stock_Price_Test.csv')
real_stock_price = dataset_test.iloc[:, 1:2].values

# Getting predicted stock price
dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test)-60: ].values
inputs = inputs.reshape(-1, 1)
inputs = sc.transform(inputs)
x_test = []
for i in range(60, 80):
  x_test.append(inputs[i-60: i, 0])
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
predicted_stock_price = regressor.predict(x_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

# Print the real and predicted stock price of the Google next to each other
print(np.concatenate((real_stock_price, predicted_stock_price), 1))

# Visualize the results
plt.plot(real_stock_price, color = 'red', label = 'Real Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Stock Price')
plt.title('Google Stock Price')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()